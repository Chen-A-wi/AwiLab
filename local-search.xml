<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>為什麼寫 Blog?</title>
    <link href="/202401263323969910/"/>
    <url>/202401263323969910/</url>
    
    <content type="html"><![CDATA[<p>文章斷斷續續也寫了有 6 年的時間，一路從 GitBook、Medium 寫到 Hexo 在這之中也獲得了一些體悟。</p><p>今年！決定抽時間出來整理文章筆記，期望以淺顯易動的方式來解說觀念或是我理解的想法，當然如果直接說結果的話，我非常非常推薦寫技術部落格好處多多文章中也會一一細數。</p><h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>會有寫技術部落格這個念頭當初是想要有技術交流的想法，如果有人留言那就代表有機會以不同的角度來去看這個問題，對於問題的理解也會有更深程度的了解。</p><p>另一方面寫技術部落格就等於在寫一篇屬於你自己的筆記也是消化吸收的好時機，必須學會怎麼解釋它的概念才算是某種程度上的理解。</p><p>因為工程師一定是團隊開發溝通就佔了很重要的一部分，解釋使對方理解也是溝通中非常重要的一環，寫文章是刻意練習的一種方式，練習如何去闡述這個觀點或是概念。</p><h1 id="自我提問"><a href="#自我提問" class="headerlink" title="自我提問"></a>自我提問</h1><p>在動手之前一定會有許多內心裡的聲音，像是我寫的文章會有人看嗎？我寫的內容會不會太淺？內容以及我的理解是正確的嗎？這些我也曾經問過我自己，我來一一解答。</p><h3 id="我寫的文章有人看嗎？"><a href="#我寫的文章有人看嗎？" class="headerlink" title="我寫的文章有人看嗎？"></a>我寫的文章有人看嗎？</h3><p>首先只要寫的內容不是空洞無用的文章都一定有人看，所以只要確保文章品質即可。這邊可以看下我先前的 Medium 的閱讀統計圖表，文章至目前為止還是有人在閱讀的，況且你產生了這方面的疑問一定也有人有一樣的疑問所以不用擔心沒有人看。</p><p><img src="https://res.cloudinary.com/deu7aohfe/image/upload/v1706577575/202401263323969910/a72bs-obsd1_x5cqby.webp" alt="Medium 統計表"></p><h3 id="我寫的內容會不會太淺？"><a href="#我寫的內容會不會太淺？" class="headerlink" title="我寫的內容會不會太淺？"></a>我寫的內容會不會太淺？</h3><p>其實可以省去這個想法，當初去聽 Android<br>Taipei 時彥彬有說過不用擔心你演講的內容太淺，每個工程師一定都經歷過各種階段。像是我第一篇的文章居然就是簡單的 HashMap，如果就本科生來說這就是上課就會教的內容基本中的基本，但對轉職的人來說這是個非常新鮮且需要的知識，不是嗎？</p><p>所以只要在文章有正確的傳遞知識的前提下，不用想太多放手的下去寫絕對沒問題的。</p><h3 id="我寫的內容及理解是正確的嗎？"><a href="#我寫的內容及理解是正確的嗎？" class="headerlink" title="我寫的內容及理解是正確的嗎？"></a>我寫的內容及理解是正確的嗎？</h3><p>這應該是最不用擔心的事情，只要寫的文章參考上有超過 1 篇也有經過驗證的話，那傳遞的內容及理解絕對是正確的，不然怎麼重現該目的？該擔心的是對方是否理解你的理解，如何傳達才是該擔心的地方。</p><h1 id="好處"><a href="#好處" class="headerlink" title="好處"></a>好處</h1><p>其實在撰寫中會慢慢發現其中的好處及附帶價值。</p><ul><li>涉略更廣的技術：<ul><li>像是想要架設一個靜態的頁面，就了解到 Hugo, Hexo,<br>Jekyll 可以協助生成一個靜態頁面，為了讓自架網站的 SEO 可以更前面可能會去學 sitemap 的優化，為了讓網站可以自動 deploy 去學習怎麼寫 yaml 檔讓 GithubAction 執行等。</li></ul></li><li>對於技術的理解更熟悉更深入：<ul><li>當學習撰寫成文章闡述觀點及概念時，一定會學著搜尋文章理解各個作者想解釋的內容並且加以佐證以證明自己的觀點，在這樣的一個過程中就會有更深入的認識與理解；在實作上面為了應證這個過程一定會想辦法重現，或是盡可能詳加的紀錄解釋，在這過程中也增加對這門技術熟練程度。</li></ul></li><li>建立自己的學習字典：<ul><li>學習後免不了會忘記，當這個時候翻閱自己的筆記一定是最快的方式，可以讓自己依照以前的流程及思路來去重拾這段記憶，也能為先前的筆記添加遺漏的部分。</li></ul></li><li>練習表達能力：<ul><li>在寫文章的過程中必須去學著闡述這個概念及觀點，在這些反覆思考的過程可以建立該概念解釋的 SOP，對表達能力的提升也是一大助力。</li></ul></li></ul><h1 id="缺點"><a href="#缺點" class="headerlink" title="缺點"></a>缺點</h1><p>有優點必定有缺點，缺點就是曠日費時。一篇文章的產出需要經歷草稿、潤稿、校正、資料收集等過程，每一步都需要時間也都需要自己來，品質上的拿捏也是非常重要的，不能為了發文數量而省去了文章品質。</p><h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><p>在動手敲鍵盤之前我想了很久，最後決定寫這篇文章作為這個 Blog 的開頭，因為皮樂寫的<a href="https://hiraku.dev/2021/08/6584/">「寫十年部落格和技術文章的心得」</a><br>影響我深遠且我非常認同皮樂的觀點。</p><p>開始之前不用想太多，給自己揹上這麼多的枷鎖，放鬆心情寫產出絕對更好，以前我也逼自己每個月必須有篇技術文章的產出，後續發現這樣的方式雖然可以最大化的提升成長效率，但就長久來說絕對不是權宜之計。</p><p>在開發上也會因為內化了這些知識，之後再進行延伸也會非常的快速，最終的目的不是證明技術會多少、實力多堅強、開發技巧多華麗，而是在寫好文章後每篇讀者都可以像 code<br>review 一樣審視文章，既有收穫又可以在交流上學到各自缺少的東西。</p><p>相互的增長絕對比自己學習來的效率更好，這也是我推廣大家一起寫技術 Blog 的原因，歡迎一起加入或是留言一起討論疑難雜症。🙂</p>]]></content>
    
    
    <categories>
      
      <category>心靈雜炊</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Blog</tag>
      
      <tag>心靈雜炊</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
