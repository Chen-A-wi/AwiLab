<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Blog 輕鬆建</title>
    <link href="/202402012108647692/"/>
    <url>/202402012108647692/</url>
    
    <content type="html"><![CDATA[<p>單純寫文章記錄的話選擇非常的多，不管是 HackMD、Medium 都是非常不錯的選擇，像 HackMD 可以用 Markdown 來編寫對於習慣 Markdown 的我來說可以無痛轉移。</p><p>Medium 則是在我自架 Blog 前就使用了，主打以文章作為社群媒介我滿喜歡這個 idea，前期有非常強大的 SEO 可以大大提高文章的能見度，可惜後續調整了 SEO 整個改爛了，也能理解為了營利推廣訂閱會員方案，但目前的推銷方式已經多到讓人厭惡的地步了，也時常因沒有訂閱會員就無法閱讀熱門文章。</p><p>思考後像是 Medium、HackMD 那些都依賴於第三方平台如果哪天像是無名小站一樣漸漸式微的話，當營運方維護費用已經高於盈利絕對會選擇關閉，便得出自架是唯一選擇的結論接著便是怎麼達成這個目的？於是踏上這條不歸路。</p><h2 id="Github-Page選擇？"><a href="#Github-Page選擇？" class="headerlink" title="Github Page選擇？"></a>Github Page 選擇？</h2><p>建置 Github Page 選擇百百種，可以藉由下方的條列選項來評估想使用哪種靜態頁面來做開發，如果以原生來說的話 Github 本身是支援 Jekyll 的，簡單方便的話可以直接套用 Jekyll 的主題即可。以上這些工具全都是開源工具，目的只是為了快速產出靜態網站且使維護上更為容易，依據需求選擇最適合你的方式即可。</p><h3 id="Jekyll"><a href="#Jekyll" class="headerlink" title="Jekyll"></a>Jekyll</h3><p>Jekyll 是由 Ruby Gem 所組成的 <sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[Jekyll安裝](https://www.jekyll.com.cn/docs/installation/#requirements)">[1]</span></a></sup>，RubyGems 是 Ruby 的 Plugin 管理器由此可知基底是 Ruby。</p><h4 id="優點"><a href="#優點" class="headerlink" title="優點"></a>優點</h4><ul><li>從 Medium 移植過來很方便，力推 ZhgChgLi 所製作的 Plugin</li><li>Github 爸爸原生支援</li><li>因為存在非常久了，所以教學文件及資源非常豐富</li></ul><h4 id="缺點"><a href="#缺點" class="headerlink" title="缺點"></a>缺點</h4><ul><li>隨著時間的推移內容較多時，編譯的過時會變得非常慢，這是 Ruby 先天語言的特性</li><li> Jekyll 有段時間沒有更新了</li></ul><h3 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h3><p>Hexo 是基於 Node.js 所開發的，編譯速度也是三者中居於中位原開發者實測 54 篇文章大概可以在 2 秒內跑完，有興趣的朋友可以去朝聖開發者的文章 <a href="https://zespia.me/blog/2012/10/11/hexo-debut/">Hexo 颯爽登場！</a>。</p><h4 id="優點-1"><a href="#優點-1" class="headerlink" title="優點"></a>優點</h4><ul><li>主題非常的多，截至目前為止有 404 個<a href="https://hexo.io/themes/">主題</a>，相較於 Jekyll 或是 Hugo 多非常的多</li><li>套件支援也非常豐富多元</li><li> Hexo 開發討論區大多來自中國，中文化程度與資源相較於 Jekyll 與 Hugo 更為多元</li><li>自帶主題，架設好馬上就可以使用了</li></ul><h4 id="缺點-1"><a href="#缺點-1" class="headerlink" title="缺點"></a>缺點</h4><ul><li>對非中文語系的人來說會討論區較不直覺一些，但這些翻譯都能解決</li></ul><h3 id="Hugo"><a href="#Hugo" class="headerlink" title="Hugo"></a>Hugo</h3><p>Hugo 是基於 Go 語言所開發的，編譯速度是三者之最官網也是直接宣傳 <a href="https://gohugo.io/">The world’s fastest framework for building websites</a>，對於熟悉 Go 的朋友這個是你的最佳選擇。</p><h4 id="優點-2"><a href="#優點-2" class="headerlink" title="優點"></a>優點</h4><ul><li>三者中最快的，每頁的建置速度不超過 1ms，建置一個 Blog 不會超過 1 秒鐘</li><li>官網也宣稱轉出來後的頁面是純靜態頁面</li></ul><h4 id="缺點-2"><a href="#缺點-2" class="headerlink" title="缺點"></a>缺點</h4><ul><li>主題的選擇相對應 Hexo 較少，但個人認為較 Jekyll 新潮一些</li></ul><h2 id="如何使用Hexo產出靜態頁？"><a href="#如何使用Hexo產出靜態頁？" class="headerlink" title="如何使用Hexo產出靜態頁？"></a>如何使用 Hexo 產出靜態頁？</h2><p>在開始之前要先準備好前置準備，就是 Node.js 與 Git Node.js 是 Hexo 產出靜態網站所需的環境，Git 則是推上 Github 所需要的。歐！還有一個 Github 帳戶。</p><h3 id="前置準備"><a href="#前置準備" class="headerlink" title="前置準備"></a>前置準備</h3><ol><li>如果是 Mac 用戶且裝好了 Homebrew，那直接輸入下方指令👇。沒有的話可以<a href="https://nodejs.org/en/download/current">點我</a>去下載安裝 Node.js，完成後可以輸入 <code>node -v</code> 確認下版號，如果有出來的話代表安裝成功。</li></ol><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">brew</span> <span class="hljs-string">install node</span><br></code></pre></td></tr></tbody></table></figure><div class="note note-info">            <p>這裡需要注意 <a href="https://hexo.io/zh-cn/docs/index.html#Node-js-%E7%89%88%E6%9C%AC%E9%99%90%E5%88%B6">Hexo 與 node 相對應的版本</a>，別裝錯了。</p>          </div><ol start="2"><li>接著再安裝 Git，輸入下方指令👇。沒有的話可以參考<a href="https://git-scm.com/book/zh-tw/v2/%E9%96%8B%E5%A7%8B-Git-%E5%AE%89%E8%A3%9D%E6%95%99%E5%AD%B8">官網</a>來安裝，這裡就不多做贅述了，完成後可以輸入 <code>git -v</code> 確認下版號，如果有出來的話代表安裝成功。</li></ol><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">brew</span> <span class="hljs-string">install git</span><br></code></pre></td></tr></tbody></table></figure><h3 id="安裝Hexo"><a href="#安裝Hexo" class="headerlink" title="安裝Hexo"></a>安裝 Hexo</h3><p>npm 安裝完後一樣可以確認一下版本順便確認是否安裝成功。</p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">npm</span> <span class="hljs-string">install hexo-cli -g</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://res.cloudinary.com/deu7aohfe/image/upload/v1707095598/202402012108647692/yh2yscv9n5hykqw9rzxi.webp" alt="Hexo版本"></p><h3 id="初始化Hexo"><a href="#初始化Hexo" class="headerlink" title="初始化Hexo"></a>初始化 Hexo</h3><p>先移動到想放 Blog 的資料夾根目錄中，像我想放在 SideProject 裡就先移動至這層資料夾內。</p><p><img src="https://res.cloudinary.com/deu7aohfe/image/upload/v1707044173/202402012108647692/mhufwy5bw8gfzsolgl5n.webp" alt="CD至根目錄"></p><p>接著初始化，Hexo 本身會建立好資料夾並安裝在裡面，<span class="label label-primary">這邊需要注意的是安裝 Hexo 的資料夾必須是空的，所以建議可以不用先創好直接使用 command 創立</span>。</p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">hexo</span> <span class="hljs-string">init '資料夾名稱'</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://res.cloudinary.com/deu7aohfe/image/upload/v1707044288/202402012108647692/atinwqrgpahnbdtatnhw.webp" alt="初始化Hexo"></p><h3 id="安裝Hexo所需Plugin"><a href="#安裝Hexo所需Plugin" class="headerlink" title="安裝Hexo所需Plugin"></a>安裝 Hexo 所需 Plugin</h3><p>先 <code>cd</code> 進我們創建的資料夾內容中，可以使用 tree 這個套件去看資料夾內部的結構，沒有的話可以 <code>brew install tree</code>，我們只是簡單確認所以只進到第一層級應該會如下圖所顯示。</p><p><img src="https://res.cloudinary.com/deu7aohfe/image/upload/v1707095215/202402012108647692/a5e0a8tzfgvyduihkeyl.webp" alt="Blog資料夾樹狀圖"></p><p>如果要全顯示的話可以輸入下方的 command，或是<a href="https://blog.csdn.net/zhuyunier/article/details/119837816">參考這篇文章</a>選擇所需的 command。</p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">tree</span> <span class="hljs-string">-N</span><br></code></pre></td></tr></tbody></table></figure><p>確認好資料一樣後可以安裝所需的 plugin 了，Hexo 會依據 package-lock.json<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="[package-lock.json的作用](https://yenkos.github.io/2021/04/02/%E5%B7%A5%E7%A8%8B%E5%8C%96/%E4%BB%80%E4%B9%88package-lock.json%20_/)">[2]</span></a></sup> 來去做 plugin 的版本管理也是依據它來安裝。</p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">npm</span> <span class="hljs-string">install</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://res.cloudinary.com/deu7aohfe/image/upload/v1707096604/202402012108647692/blj0czqvxjhvmfkmfi80.webp" alt="npm install"></p><div class="note note-info">            <p>注意如果有兩部以上的電腦想要同步 plugin 的話，可以直接刪掉 <code>node_modules</code> 這個資料夾，再 <code>npm install</code> 就會自動依照 json 檔來安裝其他電腦裡的 plugin 了，前提是有 push json 檔案至 Git 中。</p>          </div><h3 id="Build-Hexo-in-local"><a href="#Build-Hexo-in-local" class="headerlink" title="Build Hexo in local"></a>Build Hexo in local</h3><p>完成上述步驟之後差幾步就可以在本地端看到靜態頁面了，加油！</p><p>先清除 Hexo 的暫存檔，這邊記得之後重新產出靜態頁面時要先退出 local server 的狀態，看過有網友直接 clean 結果把本地端 public 的資料夾清掉了。</p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">hexo</span> <span class="hljs-string">cl</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://res.cloudinary.com/deu7aohfe/image/upload/v1707097060/202402012108647692/a0najy5oq127qknfpxhq.webp" alt="Hexo clean"></p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">hexo</span> <span class="hljs-string">g</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://res.cloudinary.com/deu7aohfe/image/upload/v1707097176/202402012108647692/tg3injdv4bypx7ric5vc.webp" alt="Hexo generate"></p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">hexo</span> <span class="hljs-string">s</span><br></code></pre></td></tr></tbody></table></figure><p><img src="https://res.cloudinary.com/deu7aohfe/image/upload/v1707097266/202402012108647692/w0qgymnla11ivknbuoy0.webp" alt="Hexo server"></p><p>最後可以 copy localhost 或是 command + 滑鼠左鍵即可跳轉到本地端的網頁了，初始畫面應該會像圖中所示，到這邊恭喜成功嘍！！🎉</p><p><img src="https://res.cloudinary.com/deu7aohfe/image/upload/v1707097457/202402012108647692/b4gq89xg3ypulgh9kvff.webp" alt="Local web"></p><h2 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h2><p>Blog 的前期準備其實蠻花時間的，各個方面全都要自己來如果需要大量客製化的話，可能就需要把主題拉下來接著去修改裡面的 css 內容等，就會需要懂程式語言畢竟需要自行維護可客製化的內容，路途上一定會有些顛簸及坑坑洞洞的，克服後一定會有所成場的！</p><p>我也會記錄下我做了哪些更動或是安裝了哪些 Plugin 從利用 Github Action 來自動化 deploy、Domain 設定、SEO 等，希望是採小章節短文章的形式避免一次太快跟不上，如果有興趣的朋友可以跟著建置一個屬於自己的 Blog，如果有任何問題也歡迎留言提問。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li>Banner Photo by <a href="https://unsplash.com/@saj_shafique?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash">Saj Shafique</a> on <a href="https://unsplash.com/photos/silhouette-of-crane-during-sunset-jCJpn7zlyCo?utm_content=creditCopyText&amp;utm_medium=referral&amp;utm_source=unsplash">Unsplash</a></li><li><a href="https://raychiutw.github.io/2019/Static-Site-Generator-Comparison/">靜態網站產生器大比拚</a><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://www.jekyll.com.cn/docs/installation/#requirements">Jekyll 安裝</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span><a href="https://yenkos.github.io/2021/04/02/%E5%B7%A5%E7%A8%8B%E5%8C%96/%E4%BB%80%E4%B9%88package-lock.json%20_/">package-lock.json 的作用</a><a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section></li></ul>]]></content>
    
    
    <categories>
      
      <category>Hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>部落格建置</tag>
      
      <tag>Blog</tag>
      
      <tag>Github Page</tag>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>為什麼寫 Blog?</title>
    <link href="/202401263323969910/"/>
    <url>/202401263323969910/</url>
    
    <content type="html"><![CDATA[<p>文章斷斷續續也寫了有 6 年的時間，一路從 GitBook、Medium 寫到 Hexo 在這之中也獲得了一些體悟。</p><p>今年！決定抽時間出來整理文章筆記，期望以淺顯易動的方式來解說觀念或是我理解的想法，當然如果直接說結果的話，我非常非常推薦寫技術部落格好處多多文章中也會一一細數。</p><h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>會有寫技術部落格這個念頭當初是想要有技術交流的想法，如果有人留言那就代表有機會以不同的角度來去看這個問題，對於問題的理解也會有更深程度的了解。</p><p>另一方面寫技術部落格就等於在寫一篇屬於你自己的筆記也是消化吸收的好時機，必須學會怎麼解釋它的概念才算是某種程度上的理解。</p><p>因為工程師一定是團隊開發溝通就佔了很重要的一部分，解釋使對方理解也是溝通中非常重要的一環，寫文章是刻意練習的一種方式，練習如何去闡述這個觀點或是概念。</p><h1 id="自我提問"><a href="#自我提問" class="headerlink" title="自我提問"></a>自我提問</h1><p>在動手之前一定會有許多內心裡的聲音，像是我寫的文章會有人看嗎？我寫的內容會不會太淺？內容以及我的理解是正確的嗎？這些我也曾經問過我自己，我來一一解答。</p><h3 id="我寫的文章有人看嗎？"><a href="#我寫的文章有人看嗎？" class="headerlink" title="我寫的文章有人看嗎？"></a>我寫的文章有人看嗎？</h3><p>首先只要寫的內容不是空洞無用的文章都一定有人看，所以只要確保文章品質即可。這邊可以看下我先前的 Medium 的閱讀統計圖表，文章至目前為止還是有人在閱讀的，況且你產生了這方面的疑問一定也有人有一樣的疑問所以不用擔心沒有人看。</p><p><img src="https://res.cloudinary.com/deu7aohfe/image/upload/v1706577575/202401263323969910/a72bs-obsd1_x5cqby.webp" alt="Medium 統計表"></p><h3 id="我寫的內容會不會太淺？"><a href="#我寫的內容會不會太淺？" class="headerlink" title="我寫的內容會不會太淺？"></a>我寫的內容會不會太淺？</h3><p>其實可以省去這個想法，當初去聽 Android<br>Taipei 時彥彬有說過不用擔心你演講的內容太淺，每個工程師一定都經歷過各種階段。像是我第一篇的文章居然就是簡單的 HashMap，如果就本科生來說這就是上課就會教的內容基本中的基本，但對轉職的人來說這是個非常新鮮且需要的知識，不是嗎？</p><p>所以只要在文章有正確的傳遞知識的前提下，不用想太多放手的下去寫絕對沒問題的。</p><h3 id="我寫的內容及理解是正確的嗎？"><a href="#我寫的內容及理解是正確的嗎？" class="headerlink" title="我寫的內容及理解是正確的嗎？"></a>我寫的內容及理解是正確的嗎？</h3><p>這應該是最不用擔心的事情，只要寫的文章參考上有超過 1 篇也有經過驗證的話，那傳遞的內容及理解絕對是正確的，不然怎麼重現該目的？該擔心的是對方是否理解你的理解，如何傳達才是該擔心的地方。</p><h1 id="好處"><a href="#好處" class="headerlink" title="好處"></a>好處</h1><p>其實在撰寫中會慢慢發現其中的好處及附帶價值。</p><ul><li>涉略更廣的技術：<ul><li>像是想要架設一個靜態的頁面，就了解到 Hugo, Hexo,<br>Jekyll 可以協助生成一個靜態頁面，為了讓自架網站的 SEO 可以更前面可能會去學 sitemap 的優化，為了讓網站可以自動 deploy 去學習怎麼寫 yaml 檔讓 GithubAction 執行等。</li></ul></li><li>對於技術的理解更熟悉更深入：<ul><li>當學習撰寫成文章闡述觀點及概念時，一定會學著搜尋文章理解各個作者想解釋的內容並且加以佐證以證明自己的觀點，在這樣的一個過程中就會有更深入的認識與理解；在實作上面為了應證這個過程一定會想辦法重現，或是盡可能詳加的紀錄解釋，在這過程中也增加對這門技術熟練程度。</li></ul></li><li>建立自己的學習字典：<ul><li>學習後免不了會忘記，當這個時候翻閱自己的筆記一定是最快的方式，可以讓自己依照以前的流程及思路來去重拾這段記憶，也能為先前的筆記添加遺漏的部分。</li></ul></li><li>練習表達能力：<ul><li>在寫文章的過程中必須去學著闡述這個概念及觀點，在這些反覆思考的過程可以建立該概念解釋的 SOP，對表達能力的提升也是一大助力。</li></ul></li></ul><h1 id="缺點"><a href="#缺點" class="headerlink" title="缺點"></a>缺點</h1><p>有優點必定有缺點，缺點就是曠日費時。一篇文章的產出需要經歷草稿、潤稿、校正、資料收集等過程，每一步都需要時間也都需要自己來，品質上的拿捏也是非常重要的，不能為了發文數量而省去了文章品質。</p><h1 id="總結"><a href="#總結" class="headerlink" title="總結"></a>總結</h1><p>在動手敲鍵盤之前我想了很久，最後決定寫這篇文章作為這個 Blog 的開頭，因為皮樂寫的<a href="https://hiraku.dev/2021/08/6584/">「寫十年部落格和技術文章的心得」</a><br>影響我深遠且我非常認同皮樂的觀點。</p><p>開始之前不用想太多，給自己揹上這麼多的枷鎖，放鬆心情寫產出絕對更好，以前我也逼自己每個月必須有篇技術文章的產出，後續發現這樣的方式雖然可以最大化的提升成長效率，但就長久來說絕對不是權宜之計。</p><p>在開發上也會因為內化了這些知識，之後再進行延伸也會非常的快速，最終的目的不是證明技術會多少、實力多堅強、開發技巧多華麗，而是在寫好文章後每篇讀者都可以像 code<br>review 一樣審視文章，既有收穫又可以在交流上學到各自缺少的東西。</p><p>相互的增長絕對比自己學習來的效率更好，這也是我推廣大家一起寫技術 Blog 的原因，歡迎一起加入或是留言一起討論疑難雜症。🙂</p>]]></content>
    
    
    <categories>
      
      <category>心靈雜炊</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Blog</tag>
      
      <tag>心靈雜炊</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
